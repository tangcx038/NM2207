# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
createInteractiveMap <- function(data_file, map_resolution = "world") {
library(ggplot2)
library(dplyr)
library(plotly)
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradientn(
colours = colorRampPalette(c("lightgreen", "darkgreen"))(10),  # Choose your color palette
limits = c(20, 2000),
n.breaks = 10,  # Number of breaks
labels = scales::comma_format(scale = 1e-3)
) +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
## Libraries
library(tidyverse)
library(maps)
library(sf)
createInteractiveMap <- function(data_file, map_resolution = "world") {
library(ggplot2)
library(dplyr)
library(plotly)
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
usa
Usa
print(Usa)
## Libraries
library(tidyverse)
library(maps)
library(sf)
createInteractiveMap <- function(data_file, map_resolution = "world") {
library(ggplot2)
library(dplyr)
library(plotly)
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
## Libraries
library(tidyverse)
library(maps)
library(sf)
createInteractiveMap <- function(data_file, map_resolution = "world") {
library(ggplot2)
library(dplyr)
library(plotly)
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
setwd("~/GitHub/NM2207_CHING/WEEK 12")
setwd("~/GitHub/NM2207_CHING/WEEK 12")
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
```
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
#problem encountered: missing data for Food and Non-Ferrous Metals
### Calculating and adding recycling rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,
2
)
### Calculating and adding wasting rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$wasting_rate <- round(
clean_waste_03_22$total_waste_not_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,
2
)
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
wasteselected
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
clean_waste_03_22$wasting_rate <- round(
clean_waste_03_22$total_waste_not_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
total_waste_not_recycled_tonne = "total_not_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
### Calculating and adding recycling rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
### Calculating and adding wasting rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$wasting_rate <- round(
clean_waste_03_22$total_waste_not_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
# Display the cleaned data
clean_waste_03_22
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
total_waste_not_recycled_tonne = "total_not_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
### Calculating and adding recycling rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
### Calculating and adding wasting rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$wasting_rate <- round(
clean_waste_03_22$total_waste_not_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne
)
# Display the cleaned data
clean_waste_03_22
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
total_waste_not_recycled_tonne = "total_not_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
### Calculating and adding recycling rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
### Calculating and adding wasting rate into DataFrame for analysis.
# Calculate wasting_rate and round to 2 decimal places
clean_waste_03_22$wasting_rate <- round(
1-clean_waste_03_22$recycling_rate,2
)
# Display the cleaned data
clean_waste_03_22
View(reverse_word)
# Libraries
library (tidyverse)
library (plotly)
library (shiny)
library(dplyr)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_stat <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
total_waste_not_recycled_tonne = "total_not_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Filtering waste_03_22 dataset for specific years and waste types
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
### Calculating and adding recycling rate into DataFrame for analysis.
# Calculate recycling_rate and round to 2 decimal places
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,2
)
### Calculating and adding wasting rate into DataFrame for analysis.
# Calculate wasting_rate and round to 2 decimal places
clean_waste_03_22$wasting_rate <- round(
1-clean_waste_03_22$recycling_rate,2
)
# Display the cleaned data
clean_waste_03_22
# Colors
custom_colors <- viridis::mako(n=30)
# Grouping by material and summarizing total waste and recycled
summary_df <- clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated))
# Adding relevant headings
colnames(summary_df) <- c("Material", "Total Waste Generated (tonnes)", "Total Waste Recycled (tonnes)")
# Displaying the summarized data
summary_df
# Adapted code for waste data
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(
hc_subtitle(
hc_credits("Your credits information here")
)
)
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Number of Reviews: </b> {point.y} <br>')%>%
hc_title(text='Most recycled material',
style=list(frontSize= '25px', fontWeight = 'Bold'))%>%
hc_subtitle(text= 'by tonnes'
style= list(fontSize='16px'))
summary_df
# Adapted code for waste data
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Number of Reviews: </b> {point.y} <br>')%>%
hc_title(text='Most recycled material',
style=list(frontSize= '25px', fontWeight = 'Bold'))%>%
hc_subtitle(text= 'By tonnes',
style= list(fontSize='16px'))
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Number of Reviews: </b> {point.y} <br>')%>%
hc_title(text='Most recycled material',
style=list(frontSize= '25px', fontWeight = 'Bold'))
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Number of Reviews: </b> {point.y} <br>')%>%
hc_title(text='Most recycled material',
style=list(frontSize= '25px', fontWeight = 'Bold'))%>%
hc_subtitle(text= 'By tonnes',
style= list(fontSize='16px'))%>%
hc_credits(enabled=T, text= "@test")
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Number of Reviews: </b> {point.y} <br>')
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Total Waste Generated: </b> {point.y} tonnes<br>') %>%
hc_title(text = 'Most Recycled Material',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'By Tonnes',
style = list(fontSize = '16px')) %>%
hc_credits_list(enabled = TRUE, text = "@test")
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b>Total Waste Generated: </b> {point.y} tonnes<br>')
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors)) %>%
hc_add_theme(hc_theme_google())
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15) %>%
hchart('column', hcaes(x = waste_type, y = total_waste_generated, color = custom_colors))
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15)
